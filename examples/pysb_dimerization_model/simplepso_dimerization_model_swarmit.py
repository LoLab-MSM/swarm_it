'''
Generated by swarm_it
simplePSO run script for dimerization_model_swarmit.py 
'''
from pysb.simulator import ScipyOdeSimulator
import numpy as np
from simplepso.pso import PSO
from dimerization_model_swarmit import model,swarm_param

# Initialize PySB solver object for running simulations.
# USER-Adjust: simulation timespan should match experimental data.
tspan = np.linspace(0,10, num=100)
solver = ScipyOdeSimulator(model, tspan=tspan)
parameters_idxs = [0, 1]
calibrate_mask = [True, True, False]
param_values = np.array([p.value for p in model.parameters])

# USER-Set: must add commands to import/load any experimental
# data for use in the likelihood function!
experiments_avg = np.load()
experiments_sd = np.load()
like_data = norm(loc=experiments_avg, scale=experiments_sd)
# USER-Set: must appropriately update cost function!
def cost(position):
    Y=np.copy(position)
    param_values[calibrate_mask] = 10 ** Y
    sim = solver.run(param_values=param_values).all
    logp_data = np.sum(like_data.logpdf(sim['observable']))
    if np.isnan(logp_data):
        logp_data = np.inf
    return -logp_data,

# Setup the particle swarm optimization run
 
# Set the number of particles in the swarm. 
num_particles = 25
# Set the number of iterations for PSO run. 
num_iterations = 50
# Construct the optimizer 
pso = PSO(save_sampled=False,
          verbose=True,
          num_procs=1) 
pso.set_cost_function(cost)
starting_position = swarm_param.centers()
pso.set_start_position(starting_position)
pso.set_bounds(lower=swarm_param.lower(), upper=swarm_param.upper())
# sets maximum speed that a particle can travel
pso.set_speed(-.25, .25)
# run it
pso.run(num_particles,
        num_iterations,
        stop_threshold=1e-5)
print("Best parameters: ",pso.best)
